name: "Playwright and JFrog Integration"

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Install Playwright browsers
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      # Step 5: Start the server
      - name: Start the server
        run: |
          npm start &  # Run the server in the background
          echo $! > server.pid  # Save the process ID (PID) for later termination

      # Step 6: Run Playwright Tests
      - name: Run Playwright Tests
        run: |
          set +e  # Allow script to continue even if tests fail
          npx playwright test --reporter=html
          echo "TEST_RESULT=$?" >> $GITHUB_ENV  # Store the exit code (0=pass, non-zero=fail)
        continue-on-error: true  # Continue even if tests fail

      # Step 7: Stop the server
      - name: Stop the server
        run: |
          kill $(cat server.pid)  # Kill the server using the saved PID
          rm server.pid  # Clean up the PID file

      # Step 8: Upload Playwright HTML Report
      - name: Upload Playwright HTML Report
        if: always()  # Upload the report regardless of test outcomes
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report

  build:
    runs-on: ubuntu-latest
    needs: test  # This ensures the build job waits for the test job to complete

    if: success()  # This ensures the build job only runs if the test job was successful

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3

      # Step 2: Setup JFrog CLI for communication with JFrog Artifactory
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      # Step 3: Configure JFrog for npm repositories
      - name: Set CLI Config
        run: jf npm-config --global=true --repo-resolve=cgdemo-virtual --repo-deploy=cgdemo-virtual

      # Step 4: Install project dependencies using npm and JFrog CLI
      - name: Install Deps using JFrog CLI
        run: jf npm install

      # Step 5: Build the project
      - name: Build Project
        run: npm run build

      # Step 6: Get current timestamp to use in file names
      - name: Get Current Timestamp
        id: vars
        run: echo "TIMESTAMP=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      # Step 7: Archive the build directory into a .tgz file with a timestamp
      - name: Archive Artifacts into TGZ with Timestamp
        run: tar -czf build_${{ env.TIMESTAMP }}.tgz build/

      # Step 8: Push the compressed .tgz file to JFrog Artifactory
      - name: Push Artifacts to JFrog
        run: |
          jf rt u "build_${{ env.TIMESTAMP }}.tgz" "cgdemo-virtual/cg-artifacts/build_${{ env.TIMESTAMP }}.tgz"

      # Step 9: Publish the npm package to JFrog Artifactory
      - name: Publish npm package
        run: jf npm publish

      # Step 10: Publish build information to JFrog
      - name: Publish Build info With JFrog CLI
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          jf rt build-publish
